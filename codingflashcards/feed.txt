<question>
Find the begining of a loop in a structure like below   
 
                  1-2-5-9
                 /       8 
     11-12-15-18-        |
                 \       7
                  26-29-30  
output = 18				  
</question>
<hint>
Determine if there is a loop (Check if linkedlist is circular)
While checking if ll is circular return the node where slow == fast;
Then take the head and the returned node and move each one by one 
until they match
</hint>
<answer>
public Node<TValue> FindBeginingOfLoop(Node<TValue> head)
{
	Node<TValue> node = head, slow = head;

	if (IsCircularLinkedList(out node))
	{
		while (node !=  slow)
		{
			slow = slow.Next;
			node = node.Next;
		}

		return node;
	}
	return null;

}

public bool IsCircularLinkedList(out Node<TValue> node)
{
	var fast = First;
	var slow = First;
	node = null;
	while (fast != null && fast.Next != null)
	{
		slow = slow.Next;
		fast = fast.Next.Next;
		if (slow == fast){
		node = fast; return true;
		}
	}

	return false;
}
</answer>
<dividder>
<question>
Reverse the below linked list
(a)-(b)-(c)-(d)

output (d)-(c)-(b)-(a)
</question>
<hint>
</hint>
<answer>
 public void Reverse()
{
	var current = First;
	Node<TValue> reversed = null;

	while (current.Next != null)
	{
		var temp = reversed;
		reversed = new Node<TValue>(current.Data);
		reversed.Next = temp;
		current = current.Next;

	}
	
	Last = First;
	Last.Next = null;

	First = current;
	First.Next = reversed;
}
</answer>
<dividder>
<question>
Given the following string 
"_r_g_t__"
write a function that counts the white spaces
and prints the counts as follows
before =1
middle =2
after  =2
</question>
<hint>
</hint>
<answer>
public static int[] CountBlanks(char[] arr, 
								int low,
								int hi)
{
	int bef = 0, 
	mid = 0,
	aft = 0,
	i = low,
	j = hi;

	var onlyInner = false;

while (i < j)
{
	if (arr[i] == ' ' && !onlyInner)
	{
		bef++;
		i++;
	}
	else if (arr[j] == ' ' && !onlyInner)
	{
		aft++;
		j--;
	}
	else if (i >= low && i <= hi)
	{
		onlyInner = true;
		if (arr[i] == ' ') mid++;
		i++;
	}

}

	return new int[] { bef, mid, aft };

}
</answer>
<dividder>
<question>
Find the Kth element in a unsorted array in linear time
input = 41,84,31,89,31,74,23,43,86,24,4,64,73,23,7,56,49,75,66
find the 10th largest element 
output = 49
</question>
<hint>
Quicksort the array and keep track of the pivot elemnt
</hint>
<answer>
public static int FindKthEl(int[] arr, int low, int hi, int kth)
{
	var pivotIdx = (low + hi)/2;
	var pivot = arr[pivotIdx];
	int i = low, j = hi;

while (i < j)
{
	while (arr[i] < pivot)
	i++;
	while (j >  low && arr[j] > pivot)
	j--;

	if (i < j)
	{
		var tmp = arr[i];
		arr[i] = arr[j];
		arr[j] = tmp;
	}
}
	var t = arr[pivotIdx];
	arr[pivotIdx] = arr[j];
	arr[j] = t;

if (kth == j + 1)
	return arr[j];
if (kth > j + 1)
	return FindKthEl(arr, j + 1, hi, kth);
	
	return FindKthEl(arr, low, j - 1, kth);

}
</answer>
<dividder>
<question>
Find the LCA of a binary search tree
    (20)
  (8)  (22) 
(4) (12)
  (10) (14)
n1 = 12 n2= 14
output = 8
</question>
<hint>
if the root is between
the passed in nodes (Assuming n1 > n2 else see LCA of BinTree)
then the root is the LCA
else go left or right depending on root.data
while going down if the input nodes are children of 
the current node.left or node.right then 
current node is the LCA
else if the recursed node is null or equal to n1 or n2
then this is invalid 
</hint>
<answer>
public static BinTreeNode<int> FindLCAofBST(BinTreeNode<int> root, BinTreeNode<int> n1,BinTreeNode<int> n2)
{
if (root == null || 
	root.Data.Equals(n1.Data) || 
	root.Data.Equals(n2.Data)) return null;

if (root.Right != null
    &&
    (root.Right.Data == n1.Data)
    ||
    (root.Right.Data == n2.Data))
    return root;

if (root.Left != null
    &&
    (root.Left.Data == n1.Data)
    ||
    (root.Left.Data == n2.Data))
    return root;

if (root.Data > n1.Data && root.Data > n2.Data)
    return FindLCAofBST(root.Left, n1, n2);
if(root.Data < n1.Data && root.Data < n2.Data)
    return FindLCAofBST(root.Right, n1, n2);

return root;
}
</answer>